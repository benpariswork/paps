# Remove 'version' field to fix warning
services:
  # Elasticsearch for logging
  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: proxy_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - proxy_network

  # Kibana for log visualization
  kibana:
    image: kibana:8.6.2
    container_name: proxy_kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - proxy_network

  # HTTP test environment
  http_server:
    image: nginx:latest
    container_name: http_server
    ports:
      - "8081:80"
    volumes:
      - ./docker/http/htdocs:/usr/share/nginx/html/
    networks:
      - proxy_network

  http_client:
    image: appropriate/curl:latest
    container_name: http_client
    depends_on:
      - http_server
    entrypoint: ["sh", "-c", "sleep 10 && echo 'HTTP Client ready. Run: docker exec -it http_client curl -v http://http_server'"]
    networks:
      - proxy_network

  # FTP test environment
  ftp_server:
    image: fauria/vsftpd
    container_name: ftp_server
    ports:
      - "21:21"
      - "30000-30009:30000-30009"
    environment:
      - FTP_USER=testuser
      - FTP_PASS=testpass
      - PASV_ADDRESS=localhost
      - PASV_MIN_PORT=30000
      - PASV_MAX_PORT=30009
    volumes:
      - ./docker/ftp/data:/home/vsftpd/testuser
    networks:
      - proxy_network

  ftp_client:
    image: alpine:latest
    container_name: ftp_client
    depends_on:
      - ftp_server
    entrypoint: ["sh", "-c", "apk add --no-cache ftp && sleep 10 && echo 'FTP Client ready. Run: docker exec -it ftp_client ftp -p ftp_server'"]
    networks:
      - proxy_network

  # DNS test environment
  dns_server:
    image: internetsystemsconsortium/bind9:9.18
    container_name: dns_server
    ports:
      - "53:53/udp"
      - "53:53/tcp"
    volumes:
      - ./docker/dns/config:/etc/bind
      - ./docker/dns/zones:/var/lib/bind
    networks:
      - proxy_network

  dns_client:
    image: alpine:latest
    container_name: dns_client
    depends_on:
      - dns_server
    entrypoint: ["sh", "-c", "apk add --no-cache bind-tools && sleep 10 && echo 'DNS Client ready. Run: docker exec -it dns_client dig @dns_server example.com'"]
    networks:
      - proxy_network

  # Telnet test environment (using ubuntu with telnetd instead of thenewvu/telnetd)
  telnet_server:
    image: ubuntu:latest
    container_name: telnet_server
    ports:
      - "23:23"
    command: bash -c "apt-get update && apt-get install -y telnetd && service xinetd start && tail -f /dev/null"
    networks:
      - proxy_network

  telnet_client:
    image: alpine:latest
    container_name: telnet_client
    depends_on:
      - telnet_server
    entrypoint: ["sh", "-c", "apk add --no-cache busybox-extras && sleep 10 && echo 'Telnet Client ready. Run: docker exec -it telnet_client telnet telnet_server'"]
    networks:
      - proxy_network

networks:
  proxy_network:
    driver: bridge

volumes:
  es_data:
    driver: local
